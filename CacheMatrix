## the goal is to create a square and invertible matrix object that can cache its inverse 
## to improve performance 

makeCacheMatrix <- function(x = numeric()) {
## defines and caches the  matrix x and the functions available to get, set the matrix and its inverse
        inv <- NULL
        set <- function(y) {
               if(!is.matrix(y)) stop(" input must be a matrix ")
                x <<- y
                inv<<-NULL
        }
        get <- function() x
        setinv <- function(invm) inv <<- invm
        getinv <- function() inv
        list(set = set, get = get,
             setinv = setinv,
             getinv = getinv)
}

cacheSolve <- function(x, ...) {
## computes the inverse of matrix cached by makeCacheMatrix it not already cached
        inv <- x$getinv()
        if(!is.null(inv)) {
                message("getting cached matrix result")
                return(inv)
        }
        data <- x$get()
        invm <- solve(data, ...)
        x$setinv(invm)
        invm
}

## test program
## m <- matrix(rnorm(25),5,5)
## m1 <- makeCacheMatrix(m)
## cacheSolve(m1)
##            [,1]        [,2]        [,3]       [,4]       [,5]
##[1,] -1.23213804  0.13436301 -0.09224561 -0.8510761 -0.4127266
##[2,] -1.46616573  0.45525117 -0.03858982 -0.2445686 -1.0278684
##[3,] -0.34823686  0.58299399  0.04971701 -0.3899506 -0.7153927
##[4,] -0.19255518 -0.17945054 -1.05553622 -1.3349176 -1.3602287
##[5,]  0.08965745  0.03327022  0.82942613  0.7471968  0.4741659
##> cacheSolve(m1)
##getting cached matrix result
##            [,1]        [,2]        [,3]       [,4]       [,5]
##[1,] -1.23213804  0.13436301 -0.09224561 -0.8510761 -0.4127266
##[2,] -1.46616573  0.45525117 -0.03858982 -0.2445686 -1.0278684
##[3,] -0.34823686  0.58299399  0.04971701 -0.3899506 -0.7153927
##[4,] -0.19255518 -0.17945054 -1.05553622 -1.3349176 -1.3602287
##[5,]  0.08965745  0.03327022  0.82942613  0.7471968  0.4741659
##> 
